% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_eg_input.R
\name{gen_input_eg}
\alias{gen_input_eg}
\title{Generate the necessary input to the sampling function}
\usage{
gen_input_eg(
  dat,
  k,
  updateCenter,
  minibatchSize = NULL,
  epsilon1 = 1e-04,
  scalar_para = 0.1,
  noise_sd = 3,
  tau_sd = 0.1,
  cen_sd = 1
)
}
\arguments{
\item{dat}{A numeric matrix of data of dimension \eqn{n \times p.}}

\item{k}{An integer, the latent dimension}

\item{updateCenter}{Logical, whether to update the center during the sampling.}

\item{minibatchSize}{Positive integer. Default is NULL, which means the
minibatch size is set to be \eqn{\max
 (4\%n, 50)}, where \eqn{n} is the sample size, for \eqn{n > 50}. When
\eqn{n \leq 50}, minibatch size \eqn{= n}.}

\item{epsilon1}{the step size in the gSGNHT algorithm. Default is \eqn{{10}^{-4}.}
See \code{\link[=ellipsoid_gaussian]{ellipsoid_gaussian()}} for more details.}

\item{scalar_para}{the scalar parameter in the gSGNHT algorithm. Default is 0.1.
See \code{\link[=ellipsoid_gaussian]{ellipsoid_gaussian()}} for more details.}

\item{noise_sd}{Positive scalar, the standard deviation of the noise
a-priori.}

\item{tau_sd}{Positive scalar, the standard deviation of \eqn{\tau} a-priori.}

\item{cen_sd}{Positive scalar, the standard deviation of the center a-priori.}
}
\value{
A list of input for the sampler, including initial values (\code{init}),
k, prior parameters (\code{prior_par}), tuning parameters for the sampler
(\code{alg_par}), whether to update the center (\code{updateCenter}) through the
sampling process.
}
\description{
\code{gen_input_eg} generates the necessary input to the sampling function
\code{\link[=gSGNHT_EG]{gSGNHT_EG()}}, which includes the initial values of the Markov chain,
prior parameters, algorithm relevant parameters, and whether or not the center
should be updated during the sampling.
}
\details{
\code{gen_input_eg} initializes the sampler with CTEF
(Melikechi and Dunson 2023). When the sample size
\eqn{n \leq 50}, the minibatch size is 50; else, the minibatch size is \eqn{\max
 (4\%n, 50).}  While our sampler allows direct
updates of \eqn{\Lambda} with a Dirichlet-Laplace prior, we find that
updating the identifiable quantifies instead, namely the singular vectors and values
of \eqn{\Lambda}, leads to better mixing. Therefore, we directly place a prior
on the singular vectors and values.

The parameters in the ellipsoid-Gaussian model follow prior distributions
as follows:
\deqn{\begin{aligned} {c} &\sim \text{N}({c}_0, \sigma_c^2 {I}_p),\\
\tau &\sim \text{N}(\tau_0, \sigma_{\tau}^2) \mathbb{1}(\mathfrak{l}, \mathfrak{u}),\\
\mu &\sim \text{vMF}(\mu_0, 7),\\
\sigma_{j}^2 &\sim \text{N}(0, \sigma_0^2)\mathbb{1}(0, \infty), \quad j = 1, \ldots, p,\\
{U} &\sim \text{Unif}(V_k(\mathbb{R}^p)),\\
s_l &\sim \text{N}(s_{l0}, \sigma_s^2)\mathbb{1}(0, \infty), \quad l = 1, \ldots, k,
\end{aligned}}
where
\eqn{V_k(\mathbb{R}^p) =\left\{A\in \mathbb{R} ^{p\times k}:A^{T}A={I}_{k}\right\}},
Parameters \eqn{c_0, \tau_0, \mu_0, s_{l0}} are set to be the initial values
produced by CTEF. The prior bounds \eqn{\mathfrak{l}} and \eqn{\mathfrak{u}} are set to be
\eqn{\tau_0 / 1.5} and \eqn{1.5 \tau_0,} which works well empirically.
We place a truncated Gaussian prior on the noise standard deviation
\eqn{\sigma_j} because
we favor a fit with small noise.
Results are generally not sensitive to the choice of the prior parameters.
}
\examples{
if (reticulate::py_module_available('ctef')) {
  gen_input_eg(shell, k = 3, TRUE)
}
}
\references{
Melikechi, O. and Dunson, D. B. (2023). Ellipsoid fitting with the cayley
transform. arXiv Preprint. arXiv:2304.10630.
}
