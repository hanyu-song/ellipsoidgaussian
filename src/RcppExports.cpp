// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// lowerTriOuterProduct_cpp
arma::rowvec lowerTriOuterProduct_cpp(const arma::rowvec& vec);
RcppExport SEXP _ellipsoidgaussian_lowerTriOuterProduct_cpp(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(lowerTriOuterProduct_cpp(vec));
    return rcpp_result_gen;
END_RCPP
}
// logTransGradAdjust_cpp
arma::vec logTransGradAdjust_cpp(const arma::vec& invSig, const arma::vec& invSig_jaco);
RcppExport SEXP _ellipsoidgaussian_logTransGradAdjust_cpp(SEXP invSigSEXP, SEXP invSig_jacoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type invSig(invSigSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type invSig_jaco(invSig_jacoSEXP);
    rcpp_result_gen = Rcpp::wrap(logTransGradAdjust_cpp(invSig, invSig_jaco));
    return rcpp_result_gen;
END_RCPP
}
// calcPsdMat_linvSig_jaco_cpp
arma::vec calcPsdMat_linvSig_jaco_cpp(const arma::vec& invSig, const arma::vec& psdMat_grad, const arma::mat& lambda);
RcppExport SEXP _ellipsoidgaussian_calcPsdMat_linvSig_jaco_cpp(SEXP invSigSEXP, SEXP psdMat_gradSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type invSig(invSigSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psdMat_grad(psdMat_gradSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(calcPsdMat_linvSig_jaco_cpp(invSig, psdMat_grad, lambda));
    return rcpp_result_gen;
END_RCPP
}
// calcVec_linvSig_jaco_cpp
arma::vec calcVec_linvSig_jaco_cpp(const arma::vec& invSig, const arma::mat& vec_grad, const arma::mat& lambda, const arma::mat& centered_sdat);
RcppExport SEXP _ellipsoidgaussian_calcVec_linvSig_jaco_cpp(SEXP invSigSEXP, SEXP vec_gradSEXP, SEXP lambdaSEXP, SEXP centered_sdatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type invSig(invSigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vec_grad(vec_gradSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_sdat(centered_sdatSEXP);
    rcpp_result_gen = Rcpp::wrap(calcVec_linvSig_jaco_cpp(invSig, vec_grad, lambda, centered_sdat));
    return rcpp_result_gen;
END_RCPP
}
// calc_linvSig_grad_cpp
std::vector<double> calc_linvSig_grad_cpp(const arma::vec& invSig, const arma::vec& psdMat_grad, const arma::mat& vec_grad, const arma::mat& lambda, const arma::mat& centered_sdat);
RcppExport SEXP _ellipsoidgaussian_calc_linvSig_grad_cpp(SEXP invSigSEXP, SEXP psdMat_gradSEXP, SEXP vec_gradSEXP, SEXP lambdaSEXP, SEXP centered_sdatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type invSig(invSigSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psdMat_grad(psdMat_gradSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vec_grad(vec_gradSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_sdat(centered_sdatSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_linvSig_grad_cpp(invSig, psdMat_grad, vec_grad, lambda, centered_sdat));
    return rcpp_result_gen;
END_RCPP
}
// calc_lambda_grad_MatPart2_cpp
arma::mat calc_lambda_grad_MatPart2_cpp(const arma::mat& lambda, const arma::vec& psdMat_grad, const arma::vec& invSigma);
RcppExport SEXP _ellipsoidgaussian_calc_lambda_grad_MatPart2_cpp(SEXP lambdaSEXP, SEXP psdMat_gradSEXP, SEXP invSigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psdMat_grad(psdMat_gradSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type invSigma(invSigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lambda_grad_MatPart2_cpp(lambda, psdMat_grad, invSigma));
    return rcpp_result_gen;
END_RCPP
}
// calc_lambda_grad_VecPart_cpp
arma::mat calc_lambda_grad_VecPart_cpp(const arma::vec& invSigma, const arma::mat& centered_sdat, const arma::mat& vec_grad);
RcppExport SEXP _ellipsoidgaussian_calc_lambda_grad_VecPart_cpp(SEXP invSigmaSEXP, SEXP centered_sdatSEXP, SEXP vec_gradSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type invSigma(invSigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_sdat(centered_sdatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vec_grad(vec_gradSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lambda_grad_VecPart_cpp(invSigma, centered_sdat, vec_grad));
    return rcpp_result_gen;
END_RCPP
}
// calc_lambda_grad_cpp
std::vector<double> calc_lambda_grad_cpp(const arma::mat& lambda, const arma::vec& psdMat_grad, const arma::mat& vec_grad, const arma::vec& invSigma, const arma::mat& centered_sdat);
RcppExport SEXP _ellipsoidgaussian_calc_lambda_grad_cpp(SEXP lambdaSEXP, SEXP psdMat_gradSEXP, SEXP vec_gradSEXP, SEXP invSigmaSEXP, SEXP centered_sdatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type psdMat_grad(psdMat_gradSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type vec_grad(vec_gradSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type invSigma(invSigmaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_sdat(centered_sdatSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_lambda_grad_cpp(lambda, psdMat_grad, vec_grad, invSigma, centered_sdat));
    return rcpp_result_gen;
END_RCPP
}
// armaMatMult
SEXP armaMatMult(arma::mat A, arma::mat B);
RcppExport SEXP _ellipsoidgaussian_armaMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(armaMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMatMult
SEXP eigenMatMult(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _ellipsoidgaussian_eigenMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _ellipsoidgaussian_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// calcgradLambdaprior_cpp
std::vector<double> calcgradLambdaprior_cpp(const arma::mat& Lambda, const arma::mat& phi, const arma::vec& kappa);
RcppExport SEXP _ellipsoidgaussian_calcgradLambdaprior_cpp(SEXP LambdaSEXP, SEXP phiSEXP, SEXP kappaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kappa(kappaSEXP);
    rcpp_result_gen = Rcpp::wrap(calcgradLambdaprior_cpp(Lambda, phi, kappa));
    return rcpp_result_gen;
END_RCPP
}
// rotate_cpp
arma::mat rotate_cpp(const arma::vec& a, const arma::vec& b);
RcppExport SEXP _ellipsoidgaussian_rotate_cpp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rotate_cpp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// kfb_cpp
double kfb_cpp(const unsigned& j, const arma::vec& gam, const arma::vec& lam, double ta);
RcppExport SEXP _ellipsoidgaussian_kfb_cpp(SEXP jSEXP, SEXP gamSEXP, SEXP lamSEXP, SEXP taSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned& >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type ta(taSEXP);
    rcpp_result_gen = Rcpp::wrap(kfb_cpp(j, gam, lam, ta));
    return rcpp_result_gen;
END_RCPP
}
// saddle_equat_cpp
double saddle_equat_cpp(const double& ta, const arma::vec& gam, const arma::vec& lam);
RcppExport SEXP _ellipsoidgaussian_saddle_equat_cpp(SEXP taSEXP, SEXP gamSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type ta(taSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(saddle_equat_cpp(ta, gam, lam));
    return rcpp_result_gen;
END_RCPP
}
// reorder_vec
arma::vec reorder_vec(const arma::vec& v, const arma::uvec& idx);
RcppExport SEXP _ellipsoidgaussian_reorder_vec(SEXP vSEXP, SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(reorder_vec(v, idx));
    return rcpp_result_gen;
END_RCPP
}
// root4SaddleEquat
double root4SaddleEquat(const arma::vec& gam, const arma::vec& lam, double low, double up);
RcppExport SEXP _ellipsoidgaussian_root4SaddleEquat(SEXP gamSEXP, SEXP lamSEXP, SEXP lowSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type low(lowSEXP);
    Rcpp::traits::input_parameter< double >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(root4SaddleEquat(gam, lam, low, up));
    return rcpp_result_gen;
END_RCPP
}
// findFBconst_cpp
double findFBconst_cpp(arma::vec& gam, arma::vec& lam, const arma::uword& which_, const bool& ordered);
RcppExport SEXP _ellipsoidgaussian_findFBconst_cpp(SEXP gamSEXP, SEXP lamSEXP, SEXP which_SEXP, SEXP orderedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type which_(which_SEXP);
    Rcpp::traits::input_parameter< const bool& >::type ordered(orderedSEXP);
    rcpp_result_gen = Rcpp::wrap(findFBconst_cpp(gam, lam, which_, ordered));
    return rcpp_result_gen;
END_RCPP
}
// approxFBconst_cpp
arma::vec approxFBconst_cpp(const arma::mat& para1, const arma::mat& para2, const arma::uword& idx_);
RcppExport SEXP _ellipsoidgaussian_approxFBconst_cpp(SEXP para1SEXP, SEXP para2SEXP, SEXP idx_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type para1(para1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type para2(para2SEXP);
    Rcpp::traits::input_parameter< const arma::uword& >::type idx_(idx_SEXP);
    rcpp_result_gen = Rcpp::wrap(approxFBconst_cpp(para1, para2, idx_));
    return rcpp_result_gen;
END_RCPP
}
// Vech2Mat_cpp
arma::mat Vech2Mat_cpp(const arma::vec& para2_vech);
RcppExport SEXP _ellipsoidgaussian_Vech2Mat_cpp(SEXP para2_vechSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para2_vech(para2_vechSEXP);
    rcpp_result_gen = Rcpp::wrap(Vech2Mat_cpp(para2_vech));
    return rcpp_result_gen;
END_RCPP
}
// calclogPseudoconst_MatParGrad4_cpp
double calclogPseudoconst_MatParGrad4_cpp(const arma::vec& para2_vech, const arma::mat& para1);
RcppExport SEXP _ellipsoidgaussian_calclogPseudoconst_MatParGrad4_cpp(SEXP para2_vechSEXP, SEXP para1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type para2_vech(para2_vechSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type para1(para1SEXP);
    rcpp_result_gen = Rcpp::wrap(calclogPseudoconst_MatParGrad4_cpp(para2_vech, para1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ellipsoidgaussian_lowerTriOuterProduct_cpp", (DL_FUNC) &_ellipsoidgaussian_lowerTriOuterProduct_cpp, 1},
    {"_ellipsoidgaussian_logTransGradAdjust_cpp", (DL_FUNC) &_ellipsoidgaussian_logTransGradAdjust_cpp, 2},
    {"_ellipsoidgaussian_calcPsdMat_linvSig_jaco_cpp", (DL_FUNC) &_ellipsoidgaussian_calcPsdMat_linvSig_jaco_cpp, 3},
    {"_ellipsoidgaussian_calcVec_linvSig_jaco_cpp", (DL_FUNC) &_ellipsoidgaussian_calcVec_linvSig_jaco_cpp, 4},
    {"_ellipsoidgaussian_calc_linvSig_grad_cpp", (DL_FUNC) &_ellipsoidgaussian_calc_linvSig_grad_cpp, 5},
    {"_ellipsoidgaussian_calc_lambda_grad_MatPart2_cpp", (DL_FUNC) &_ellipsoidgaussian_calc_lambda_grad_MatPart2_cpp, 3},
    {"_ellipsoidgaussian_calc_lambda_grad_VecPart_cpp", (DL_FUNC) &_ellipsoidgaussian_calc_lambda_grad_VecPart_cpp, 3},
    {"_ellipsoidgaussian_calc_lambda_grad_cpp", (DL_FUNC) &_ellipsoidgaussian_calc_lambda_grad_cpp, 5},
    {"_ellipsoidgaussian_armaMatMult", (DL_FUNC) &_ellipsoidgaussian_armaMatMult, 2},
    {"_ellipsoidgaussian_eigenMatMult", (DL_FUNC) &_ellipsoidgaussian_eigenMatMult, 2},
    {"_ellipsoidgaussian_eigenMapMatMult", (DL_FUNC) &_ellipsoidgaussian_eigenMapMatMult, 2},
    {"_ellipsoidgaussian_calcgradLambdaprior_cpp", (DL_FUNC) &_ellipsoidgaussian_calcgradLambdaprior_cpp, 3},
    {"_ellipsoidgaussian_rotate_cpp", (DL_FUNC) &_ellipsoidgaussian_rotate_cpp, 2},
    {"_ellipsoidgaussian_kfb_cpp", (DL_FUNC) &_ellipsoidgaussian_kfb_cpp, 4},
    {"_ellipsoidgaussian_saddle_equat_cpp", (DL_FUNC) &_ellipsoidgaussian_saddle_equat_cpp, 3},
    {"_ellipsoidgaussian_reorder_vec", (DL_FUNC) &_ellipsoidgaussian_reorder_vec, 2},
    {"_ellipsoidgaussian_root4SaddleEquat", (DL_FUNC) &_ellipsoidgaussian_root4SaddleEquat, 4},
    {"_ellipsoidgaussian_findFBconst_cpp", (DL_FUNC) &_ellipsoidgaussian_findFBconst_cpp, 4},
    {"_ellipsoidgaussian_approxFBconst_cpp", (DL_FUNC) &_ellipsoidgaussian_approxFBconst_cpp, 3},
    {"_ellipsoidgaussian_Vech2Mat_cpp", (DL_FUNC) &_ellipsoidgaussian_Vech2Mat_cpp, 1},
    {"_ellipsoidgaussian_calclogPseudoconst_MatParGrad4_cpp", (DL_FUNC) &_ellipsoidgaussian_calclogPseudoconst_MatParGrad4_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ellipsoidgaussian(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
